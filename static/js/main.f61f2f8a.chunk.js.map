{"version":3,"sources":["components/search-panel/img/loupe.svg","components/spinner/img/sunny-light.svg","components/content/img/winter.svg","components/content/img/humidity.svg","components/content/img/pressure.svg","components/app/img/sky.png","components/app/img/cloud-dark.svg","services/weather-service.ts","components/dropdown-list/dropdown-list.tsx","components/search-panel/search-panel.tsx","components/spinner/spinner.tsx","components/error-indicator/error-indicator.tsx","components/content/content.tsx","components/app/app.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getResource","url","a","fetch","response","json","body","ok","Error","message","getDateWeather","city","result","transformDateWeather","getDateListCities","searchText","transfoemDateListCities","date","slice","map","item","name","icon","weather","description","windSpeed","wind","speed","toFixed","temperature","Math","round","main","temp","feelsLike","feels_like","pressure","humidity","fadeIn","keyframes","AutoContainer","styled","div","Option","p","props","active","DropdownList","setCity","handleMouseOver","options","count","listOptions","index","key","onMouseOver","onClick","Form","form","SearchInput","input","SearchButton","button","loupe","SearchPanel","wrapperSetIsSubmitting","isSubmitting","wrapperSetSearch","search","useState","display","setDisplay","setOptions","setCount","focusTextInput","useRef","useEffect","current","select","delayDebounce","debounce","trim","length","then","catch","err","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","test","target","autoFocus","ref","onKeyDown","SpinnerBody","Spinner","src","sun","alt","ErrorBody","ErrorIndicator","errorMessage","Img","img","WeatherDescription","Temperature","WeatherItem","Content","infoCity","loading","error","hasData","spinner","Message","content","ContentView","Object","keys","airPressure","winter","airHumidity","Wrapper","beginin","cloudDark","sky","App","setInfoCity","setUploading","setError","setErrorMessage","setBeginin","setIsSubmitting","localStorage","getItem","setSearch","lastCity","onInfoLoaded","onError","setItem","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f61f2f8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loupe.0c48e29d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny-light.090e58b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/winter.330e5376.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.a6765183.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure.e61177a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sky.d9b2d03d.png\";","module.exports = __webpack_public_path__ + \"static/media/cloud-dark.a69e78d5.svg\";","const WeatherBase = 'https://api.openweathermap.org/data/2.5/weather?q=';\nconst WeatherKey =\n  '&lang=ru&units=metric&appid=0f49363de5af37c512e1a84dd3bab4dd';\nconst ListCitiesBase = 'http://autocomplete.travelpayouts.com/places2?term=';\nconst QueryOption = '&locale=ru&types[]=city';\n\nconst MaxLengthList = 5;\n\nconst getResource = async (url: string) => {\n  const response = await fetch(url);\n  const body = await response.json();\n\n  if (!response.ok) {\n    throw new Error(`Whoops, ${body.message}`);\n  }\n\n  return body;\n};\n\nexport const getDateWeather = async (city: string) => {\n  const result = await getResource(`${WeatherBase}${city}${WeatherKey}`);\n\n  return transformDateWeather(result);\n};\n\nexport const getDateListCities = async (searchText: string) => {\n  const result = await getResource(\n    `${ListCitiesBase}${searchText}${QueryOption}`\n  );\n  return transfoemDateListCities(result);\n};\n\nconst transfoemDateListCities = (date: ITransfoemDateListCities[]) => {\n  return date.slice(0, MaxLengthList).map((item) => item.name);\n};\n\nconst transformDateWeather = (date: ItransformDateWeather) => {\n  return {\n    icon: date.weather[0].icon,\n    description: date.weather[0].description,\n    windSpeed: [+date.wind.speed.toFixed(1)],\n    temperature: [Math.round(date.main.temp)],\n    feelsLike: [Math.round(date.main.feels_like)],\n    pressure: date.main.pressure,\n    humidity: date.main.humidity,\n    name: date.name,\n  };\n};\n\ninterface ITransfoemDateListCities {\n  name: string;\n}\n\ninterface ItransformDateWeather {\n  weather: { description: string; icon: string }[];\n  wind: { speed: number };\n  main: {\n    temp: number;\n    feels_like: number;\n    pressure: number;\n    humidity: number;\n  };\n  name: string;\n}\n","import React, { FC } from 'react';\n\nimport styled, { keyframes } from 'styled-components';\n\nconst fadeIn = keyframes`\n  to {\n    opacity: 1;\n  }\n`;\n\nconst AutoContainer = styled.div`\n  position: absolute;\n  top: 34px;\n  width: -webkit-fill-available;\n  grid-column: 1/4;\n  background: #eceef2;\n  color: #9ba4b6;\n  font-weight: 400;\n  font-size: 16px;\n  opacity: 0;\n  animation: 0.5s ${fadeIn} 0.3s both;\n`;\n\nconst Option = styled.p<{ active: boolean }>`\n  cursor: pointer;\n  font-family: Arial, sans-serif;\n  padding: 9px 0 12px 9px;\n  margin: 0;\n  background: ${(props) => (props.active ? '#cbd9f5' : '')};\n`;\n\nexport const DropdownList: FC<IDropdownList> = ({\n  setCity,\n  handleMouseOver,\n  options,\n  count,\n}) => {\n  const listOptions = options.map((item, index) => {\n    return (\n      <Option\n        key={index}\n        active={index === count}\n        onMouseOver={() => handleMouseOver(index)}\n        onClick={() => setCity(item)}\n      >\n        {item}\n      </Option>\n    );\n  });\n\n  return <AutoContainer>{listOptions}</AutoContainer>;\n};\n\ninterface IDropdownList {\n  options: string[];\n  count?: number;\n  handleMouseOver: (index: number) => void;\n  setCity: (item: string) => void;\n}\n","import React, {\n  useState,\n  ChangeEvent,\n  FC,\n  FormEvent,\n  useRef,\n  useEffect,\n  KeyboardEvent,\n} from 'react';\nimport { debounce } from 'lodash';\nimport { getDateListCities } from '../../services/weather-service';\nimport { DropdownList } from '../dropdown-list/dropdown-list';\n\nimport styled from 'styled-components';\nimport loupe from './img/loupe.svg';\n\nconst Form = styled.form`\n  display: grid;\n  position: relative;\n  grid-template-columns: 4fr 1fr;\n  grid-column: 1/4;\n  justify-self: center;\n  align-self: start;\n`;\n\nconst SearchInput = styled.input`\n  height: 36px;\n  background: #eceef2;\n  border: none;\n  border-radius: 5px 0 0 5px;\n  font-weight: 400;\n  font-size: 16px;\n  color: #9ba4b6;\n  padding-left: 12px;\n  outline: none;\n\n  &::placeholder {\n    color: #9ba4b6;\n    font-weight: 400;\n    font-size: 16px;\n  }\n`;\n\nconst SearchButton = styled.button`\n  height: 38px;\n  outline: none;\n  position: relative;\n  background: #eceef2;\n  border: none;\n  border-radius: 0 5px 5px 0;\n\n  &::after {\n    content: '';\n    display: inline-block;\n    position: absolute;\n    width: 36px;\n    height: 36px;\n    right: 0;\n    top: 0;\n    background: url(${loupe}) no-repeat center;\n    opacity: 0.5;\n    transition: opacity 0.1s ease-out;\n  }\n`;\n\nexport const SearchPanel: FC<ISearchPanel> = ({\n  wrapperSetIsSubmitting,\n  isSubmitting,\n  wrapperSetSearch,\n  search,\n}) => {\n  const [display, setDisplay] = useState(false);\n  const [options, setOptions] = useState(['']);\n  let [count, setCount] = useState(-1);\n  const focusTextInput = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    focusTextInput.current!.select();\n    setDisplay(false);\n  }, [isSubmitting]);\n\n  const delayDebounce = useRef(\n    debounce((searchText: string) => {\n      if (searchText.trim().length === 0) {\n        setDisplay(false);\n        setCount(-1);\n        return;\n      }\n\n      getDateListCities(searchText)\n        .then((body) => setOptions(body))\n        .catch((err) => console.log(err));\n\n      setDisplay(true);\n    }, 500)\n  ).current;\n\n  const onValueChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const pattern = /^[a-zA-Zа-яА-яёЁ\\s-]*$/;\n    if (pattern.test(e.target.value)) {\n      delayDebounce(e.target.value);\n      wrapperSetSearch(e.target.value);\n    }\n  };\n\n  const setCity = (city: string) => {\n    wrapperSetIsSubmitting();\n    wrapperSetSearch(city);\n  };\n\n  const onSubmit = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    wrapperSetSearch(search.trim());\n    wrapperSetIsSubmitting();\n    setCount(-1);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (display && e.key === 'ArrowDown' && count < options.length - 1) {\n      e.preventDefault();\n      setCount(++count);\n      wrapperSetSearch(options[count]);\n    }\n    if (display && e.key === 'ArrowUp' && count > 0) {\n      e.preventDefault();\n      setCount(--count);\n      wrapperSetSearch(options[count]);\n    }\n  };\n\n  const handleMouseOver = (index: number) => {\n    setCount(index);\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <SearchInput\n        type=\"text\"\n        placeholder=\"Введите город\"\n        value={search}\n        onChange={onValueChange}\n        autoFocus={true}\n        ref={focusTextInput}\n        onKeyDown={handleKeyDown}\n      />\n      <SearchButton type=\"submit\" />\n      {display && (\n        <DropdownList\n          setCity={setCity}\n          handleMouseOver={handleMouseOver}\n          options={options}\n          count={count}\n        />\n      )}\n    </Form>\n  );\n};\n\ninterface ISearchPanel {\n  wrapperSetSearch: (value: string) => void;\n  search: string;\n  wrapperSetIsSubmitting: () => void;\n  isSubmitting: boolean;\n}\n","import React, { FC } from 'react';\nimport sun from './img/sunny-light.svg';\n\nimport styled from 'styled-components';\n\nconst SpinnerBody = styled.div`\n  grid-column: 2/3;\n  justify-self: center;\n  align-self: start;\n`;\n\nexport const Spinner: FC = () => {\n  return (\n    <SpinnerBody>\n      <img src={sun} alt=\"loading\" />\n    </SpinnerBody>\n  );\n};\n","import React, { FC } from 'react';\n\nimport styled from 'styled-components';\n\nconst ErrorBody = styled.p`\n  grid-column: 2/3;\n  justify-self: center;\n  align-self: start;\n  text-align: center;\n  font-weight: 400;\n  font-size: 24px;\n  color: white;\n`;\n\nexport const ErrorIndicator: FC<IErrorIndicator> = ({ errorMessage }) => {\n  return <ErrorBody>{errorMessage}</ErrorBody>;\n};\n\ninterface IErrorIndicator {\n  errorMessage?: string | null;\n}\n","import React, { FC } from 'react';\nimport { Spinner } from '../spinner/spinner';\nimport { ErrorIndicator } from '../error-indicator/error-indicator';\nimport winter from './img/winter.svg';\nimport airHumidity from './img/humidity.svg';\nimport airPressure from './img/pressure.svg';\n\nimport styled from 'styled-components';\n\nconst Img = styled.img`\n  grid-column: 2/3;\n  justify-self: center;\n  height: 100px;\n`;\n\nconst WeatherDescription = styled.p`\n  grid-column: 2/3;\n  justify-self: center;\n  text-align: center;\n  font-size: 25px;\n  margin: 0;\n  color: white;\n`;\n\nconst Temperature = styled(WeatherDescription)`\n  font-size: 37px;\n`;\n\nconst WeatherItem = styled.div`\n  grid-column: 2/3;\n  display: grid;\n  align-items: center;\n  grid-template-columns: 1fr 2fr;\n  border-bottom: 4px solid white;\n  img {\n    height: 50px;\n  }\n  p {\n    font-size: 25px;\n    color: white;\n  }\n`;\n\nexport const Content: FC<IContent> = ({\n  infoCity,\n  loading,\n  error,\n  errorMessage,\n}) => {\n  const hasData = !(loading || error);\n\n  const spinner = loading ? <Spinner /> : null;\n  const Message = error ? <ErrorIndicator errorMessage={errorMessage} /> : null;\n  const content = hasData ? <ContentView infoCity={infoCity} /> : null;\n\n  return (\n    <>\n      {Message}\n      {spinner}\n      {content}\n    </>\n  );\n};\n\nconst ContentView: FC<IContentView> = ({ infoCity }) => {\n  const {\n    icon,\n    windSpeed,\n    temperature,\n    description,\n    pressure,\n    humidity,\n  } = infoCity;\n\n  if (!Object.keys(infoCity).length) return null;\n\n  return (\n    <>\n      <Img\n        alt=\"description\"\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n      />\n      <WeatherDescription>{description}</WeatherDescription>\n      <Temperature> {temperature} °C</Temperature>\n      <WeatherItem>\n        <img alt=\"pressure\" src={airPressure} />\n        <p>{pressure} мм рт. ст.</p>\n      </WeatherItem>\n      <WeatherItem>\n        <img alt=\"wind speed\" src={winter} />\n        <p>{windSpeed} м/с</p>\n      </WeatherItem>\n      <WeatherItem>\n        <img alt=\"humidity\" src={airHumidity} />\n        <p>{humidity} %</p>\n      </WeatherItem>\n    </>\n  );\n};\n\ninterface IContentView {\n  infoCity: { [key: string]: number | string };\n}\n\ninterface IContent extends IContentView {\n  loading: boolean;\n  error: boolean;\n  errorMessage?: string | null;\n}\n","import React, { FC, useState, useEffect } from 'react';\nimport { getDateWeather } from '../../services/weather-service';\nimport { SearchPanel } from '../search-panel/search-panel';\nimport { Content } from '../content/content';\n\nimport styled from 'styled-components';\nimport sky from './img/sky.png';\nimport cloudDark from './img/cloud-dark.svg';\n\nconst Wrapper = styled.main<{ beginin: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 1em;\n  padding: 2em;\n  height: 578px;\n  width: 794px;\n  position: relative;\n  background: url(${(props) => (props.beginin ? cloudDark : '')}) no-repeat;\n  background-size: cover;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: url(${sky}) no-repeat;\n    background-size: cover;\n    filter: blur(8px);\n    z-index: -1;\n  }\n`;\n\nconst App: FC = () => {\n  const [infoCity, setInfoCity] = useState({});\n  const [loading, setUploading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [beginin, setBeginin] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [search, setSearch] = useState(localStorage.getItem('city') || '');\n\n  useEffect(() => {\n    const lastCity: any = localStorage.getItem('city');\n\n    if (!lastCity) return;\n    setBeginin(false);\n\n    getDateWeather(lastCity)\n      .then((body) => onInfoLoaded(body))\n      .catch((error) => onError(error));\n  }, []);\n\n  useEffect(() => {\n    if (!search) return;\n    setUploading(true);\n\n    localStorage.setItem('city', search);\n    setBeginin(false);\n\n    getDateWeather(search)\n      .then((body) => onInfoLoaded(body))\n      .catch((error) => onError(error));\n  }, [isSubmitting]);\n\n  const wrapperSetSearch = (value: string): void => {\n    setSearch(value);\n  };\n\n  const wrapperSetIsSubmitting = () => {\n    setIsSubmitting(!isSubmitting);\n  };\n\n  const onError = (error: { message: string }) => {\n    setErrorMessage(error.message);\n    setError(true);\n    setUploading(false);\n  };\n\n  const onInfoLoaded = (body: {}) => {\n    setInfoCity(body);\n    setUploading(false);\n    setError(false);\n  };\n\n  return (\n    <Wrapper beginin={beginin}>\n      <SearchPanel\n        wrapperSetIsSubmitting={wrapperSetIsSubmitting}\n        isSubmitting={isSubmitting}\n        search={search}\n        wrapperSetSearch={wrapperSetSearch}\n      />\n      <Content\n        infoCity={infoCity}\n        loading={loading}\n        error={error}\n        errorMessage={errorMessage}\n      />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    display: grid;\n    justify-content: center;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}